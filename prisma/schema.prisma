// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  item_name String

  category Category @relation(fields: [category_id], references: [id], onDelete: NoAction)
  category_id String @db.ObjectId

  checkoutItem CheckoutItems[]

  item_price Int
  item_quantity Int
  description String
  image String
  user_id String 

  created_at   DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  deletedAt DateTime?
}

model Category {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    category String

    store Store[]

    user_id String 

    created_at   DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
}

model Client {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    email String

    phone String?
    name String?

    link String @unique

    short_link String @unique
    user_id String 

    checkout Checkout?

    created_at   DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    deletedAt DateTime?
}

enum PAYMENT_STATUS {
  PENDING
  ONGOING
  COMPLETED
  FAILED
}

model CheckoutItems {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  item_name String
  image String
  item_price Int
  description String?
  quantity Int

  product Store @relation(fields: [product_id], references: [id], onDelete: NoAction) 
  product_id String @db.ObjectId

  order Order? @relation(fields: [order_id], references: [id])
  order_id String? @db.ObjectId

  paid Boolean @default(false)

  checkout Checkout @relation(fields: [checkout_id], references: [id])
  checkout_id String @db.ObjectId

  tx_reference String?

  created_at   DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Checkout {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  items CheckoutItems[]

  orders Order[]

  client Client @relation(fields: [client_id], references: [id])
  client_id String @db.ObjectId @unique

  user_id String

  discount Int @default(0)
  delivery Int @default(0)

  payment_status PAYMENT_STATUS @default(PENDING)

  created_at   DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum ORDER_STATUS {
    PENDING
    ONGOING
    COMPLETED
    FAILED
}

// type OrderItems {
//   checkout_item_id String @db.ObjectId
// }

model Order {
 id String @id @default(auto()) @map("_id") @db.ObjectId

 checkout_items CheckoutItems[]

 status ORDER_STATUS @default(PENDING)

 checkout Checkout @relation(fields: [checkout_id], references: [id])
 checkout_id String @db.ObjectId

 tx_reference String @unique

 created_at   DateTime   @default(now())
 updatedAt  DateTime   @updatedAt
}


model Insights {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  exp Int
  part_text String
  
  last_message String?
  last_response String?

  user_id String @unique
  created_at   DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}
